generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  name         String
  email        String      @unique
  password     String
  Department   Department? @relation(fields: [departmentId], references: [id])
  departmentId Int?
  program      Programs?   @relation(fields: [programId], references: [id])
  programId    Int?
  profilepic   String?
  avaliacoes   Avaliacao[]
  comments     Comment[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Comment {
  id          Int       @id @default(autoincrement())
  text        String
  userId      Int
  avaliacaoId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  avaliacao   Avaliacao @relation(fields: [avaliacaoId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Avaliacao {
  id          Int       @id @default(autoincrement())
  text        String
  userId      Int
  nota        Int
  date        DateTime  @default(now())
  isEdited    Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id])
  professor   Professor @relation(fields: [professorId], references: [id])
  professorId Int
  course      Courses   @relation(fields: [courseId], references: [id])
  courseId    Int
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Programs {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Courses {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  professors Professor[] @relation("ProfessorCourses")
  avaliacoes Avaliacao[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Professor {
  id           Int         @id @default(autoincrement())
  name         String
  department   Department  @relation(fields: [departmentId], references: [id])
  departmentId Int
  courses      Courses[]   @relation("ProfessorCourses")
  avaliacoes   Avaliacao[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Department {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  professors Professor[]
  users      User[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}
